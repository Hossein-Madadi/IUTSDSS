from PyQt4 import QtGui
from PyQt4.QtGui import *
from qgis.core import *
from qgis.analysis import QgsRasterCalculator, QgsRasterCalculatorEntry
from qgis.utils import *
from ui.ui_Evi_Module_dialog_base import Ui_EviClassDialogBase
import collections
from osgeo import gdal, osr
import numpy as np
import platform, tempfile
import processing

# create the dialog.
class EviClassDialog(QtGui.QDialog):
    def __init__(self, iface):
        QtGui.QDialog.__init__(self)
        self.iface = iface

        # Set up the user interface from Designer.
        self.ui = Ui_EviClassDialogBase()
        self.ui.setupUi(self)
        self.ui.btnProcess.setDisabled(True)

        # Set up the signals.
        self.connectSignals()

    # Connections.
    def connectSignals(self):
        self.ui.cBox_Exp_1.currentIndexChanged.connect(self.chek_fields)
        self.ui.cBox_Exp_2.currentIndexChanged.connect(self.chek_fields)
        self.ui.cBox_Exp_3.currentIndexChanged.connect(self.chek_fields)
        self.ui.cBox_Exp_4.currentIndexChanged.connect(self.chek_fields)
        self.ui.cBox_Sen_1.currentIndexChanged.connect(self.chek_fields)
        self.ui.cBox_Sen_2.currentIndexChanged.connect(self.chek_fields)
        self.ui.cBox_Capa_1.currentIndexChanged.connect(self.chek_fields)
        self.ui.cBox_Capa_2.currentIndexChanged.connect(self.chek_fields)
        self.ui.linOutput.textChanged.connect(self.chek_fields)
        self.ui.pButton_Output.clicked.connect(self.select_output_file)
        self.ui.btnClose.clicked.connect(self.close)
        self.ui.btnProcess.clicked.connect(self.btnProcessClicked)

    # Get raster layers into a list.
    def getRasters(self):
        layers = QgsMapLayerRegistry.instance().mapLayers().values()
        raster_list = []
        for layer in layers:
            if layer.type() == QgsMapLayer.RasterLayer:
                raster_list.append(layer)
        return raster_list

    # Update combo box fields for new run.
    def update_fields(self):
        raster_list = self.getRasters()

        # clear the combos.
        self.ui.cBox_Exp_1.clear()
        self.ui.cBox_Exp_2.clear()
        self.ui.cBox_Exp_3.clear()
        self.ui.cBox_Exp_4.clear()
        self.ui.cBox_Sen_1.clear()
        self.ui.cBox_Sen_2.clear()
        self.ui.cBox_Capa_1.clear()
        self.ui.cBox_Capa_2.clear()

        # Clear fields.
        self.ui.linOutput.clear()

        # Add layers to combos.
        for layer in raster_list:
            self.ui.cBox_Exp_1.addItem(layer.name(), layer)
            self.ui.cBox_Exp_2.addItem(layer.name(), layer)
            self.ui.cBox_Exp_3.addItem(layer.name(), layer)
            self.ui.cBox_Exp_4.addItem(layer.name(), layer)
            self.ui.cBox_Sen_1.addItem(layer.name(), layer)
            self.ui.cBox_Sen_2.addItem(layer.name(), layer)
            self.ui.cBox_Capa_1.addItem(layer.name(), layer)
            self.ui.cBox_Capa_2.addItem(layer.name(), layer)

    # Check input fields.
    def chek_fields(self):
        # Defining layer input
        self.layer1 = self.ui.cBox_Exp_1.itemData(self.ui.cBox_Exp_1.currentIndex())
        self.layer2 = self.ui.cBox_Exp_2.itemData(self.ui.cBox_Exp_2.currentIndex())
        self.layer3 = self.ui.cBox_Exp_3.itemData(self.ui.cBox_Exp_3.currentIndex())
        self.layer4 = self.ui.cBox_Exp_4.itemData(self.ui.cBox_Exp_4.currentIndex())
        self.layer5 = self.ui.cBox_Sen_1.itemData(self.ui.cBox_Sen_1.currentIndex())
        self.layer6 = self.ui.cBox_Sen_2.itemData(self.ui.cBox_Sen_2.currentIndex())
        self.layer7 = self.ui.cBox_Capa_1.itemData(self.ui.cBox_Capa_1.currentIndex())
        self.layer8 = self.ui.cBox_Capa_2.itemData(self.ui.cBox_Capa_2.currentIndex())

       	# Make a list from raster layers in combo boxes.
        lst = []
        lst.extend([self.layer1, self.layer2, self.layer3, self.layer4, self.layer5, self.layer6, self.layer7, self.layer8])

        # Check layers in combo boxes are individual or not.
        lst2 = [item for item, count in collections.Counter(lst).items() if count > 1]

        # Disable process button if layers iterated.
        self.outPutName = self.ui.linOutput.text()
        if not self.outPutName:
            if not lst2:
                self.ui.btnProcess.setEnabled(False)
            elif lst2 is not None:
                self.ui.btnProcess.setEnabled(False)
        elif self.outPutName is not None:
            if not lst2:
                self.ui.btnProcess.setEnabled(True)
            elif lst2 is not None:
                self.ui.btnProcess.setEnabled(False)

        return lst

    # Add input layers name in a list.
    def readRasters(self):
        # Defining layer input.
        self.layer1 = self.ui.cBox_Exp_1.currentText()
        self.layer2 = self.ui.cBox_Exp_2.currentText()
        self.layer3 = self.ui.cBox_Exp_3.currentText()
        self.layer4 = self.ui.cBox_Exp_4.currentText()
        self.layer5 = self.ui.cBox_Sen_1.currentText()
        self.layer6 = self.ui.cBox_Sen_2.currentText()
        self.layer7 = self.ui.cBox_Capa_1.currentText()
        self.layer8 = self.ui.cBox_Capa_2.currentText()

        # Make a list from raster layers in combo boxes.
        lstLyr = []
        lstLyr.extend(
            [self.layer1, self.layer2, self.layer3, self.layer4, self.layer5, self.layer6,
             self.layer7, self.layer8])

        return lstLyr

    # Check cell size and geometries of input layers.
    # If input data are valid then run model.
    def checkGeodata(self):
        lstLyr = self.readRasters()

        # Get cell size of input raster layers.
        registry = QgsMapLayerRegistry.instance()
        cellSize_Lst = []

        for layer in lstLyr:
            lyr = registry.mapLayersByName(layer)
            xLyr = lyr[0].rasterUnitsPerPixelX()
            cellSize_Lst.append(xLyr)

        # Get crs of input raster layers.
        crs_Lst = []
        for layer in lstLyr:
            lyr = registry.mapLayersByName(layer)
            xLyr = lyr[0].crs().authid()
            crs_Lst.append(xLyr)

        if not self.all_same(cellSize_Lst):
            if not self.all_same(crs_Lst):
                self.userWarning("Error", "Pixel Size and Coordinate Reference System (CRS) "
                                          "must be the same for all input layers."
                                          "Pixel Size of all input Layers is : '%s' and "
                                          "CRS of all input Layers is : '%s'."
                                 % (str(cellSize_Lst), (str(crs_Lst))))
            elif self.all_same(crs_Lst) is not None:
                self.userWarning("Error", "Pixel Size "
                                          "must be the same for all input layers."
                                          "Pixel Size of all input Layers is : '%s'"
                                 % (str(cellSize_Lst)))
        elif self.all_same(cellSize_Lst) is not None:
            if not self.all_same(crs_Lst):
                self.userWarning("Error", "Coordinate Reference System (CRS)"
                                          " must be the same for all input layers."
                                          "CRS of all input Layers is : '%s'."
                                 % ((str(crs_Lst))))
            elif self.all_same(crs_Lst) is not None:
                self.normalization()
                self.vulneravility()

    # Check for repeated item in a list.
    def all_same(self,items):
        return all(x == items[0] for x in items)

    # Define output path and name for vulnerability layer.
    def select_output_file(self):
        fileTypes = 'GeoTIFF Files (*.tif *.tiff)'
        filename = QFileDialog.getSaveFileName(self, "Select output file ", "", fileTypes)
        if filename:
            # If the output file has no extension it considered as TIFF file.
            if not os.path.splitext(filename)[1]:
                outputFile = os.path.splitext(filename)[0] + '.tif'

            elif os.path.splitext(filename)[1] != '.tif':
                outputFile = os.path.splitext(filename)[0] + '.tif'

            else:
                outputFile = filename
        self.ui.linOutput.setText(outputFile)

    # Warning box.
    def userWarning(self, text, details):
        msg = QMessageBox()
        msg.setIcon(QMessageBox.Warning)
        msg.setText(text)
        msg.setWindowTitle("Warning")
        msg.setDetailedText(details)
        msg.exec_()

    # Called when "Process" button pressed.
    def btnProcessClicked(self):
        self.checkGeodata()

    # Sum all pixel values for a raster layer.
    def sumValue(self, raster):
        provider = raster.dataProvider()
        extent = provider.extent()

        rows = raster.height()
        cols = raster.width()
        block = provider.block(1, extent, cols, rows)
        sum = 0

        for i in range(rows):
            for j in range(cols):
                if block.value(i, j) >= 0:
                    sum += block.value(i, j)
        return sum

    # Create temporary folder for intermediate layers.
    def gettempdir(self):
        platform_type = platform.system()
        tempplatform = tempfile.gettempdir()
        tempdir = ''
        if platform_type == 'Linux':
            tempdir = str(tempplatform) + '/tmpSDSSRoad/vulnerability'
        elif platform_type == 'Windows':
            tempdir = str(tempplatform) + '/tmpSDSSRoad/vulnerability'
        return tempdir

    # Standarization All input raster layers.
    # Divide a raster layer to sum of its all pixel values (execute for each index - Yij maps).
    def normalization(self):
        tempdir = self.gettempdir()
        lst = self.chek_fields()
        lst_escNames = []

        for layer in lst[0:4]:
            lyrPath = layer.source()
            lyrName = layer.name()
            lyr2 = QgsRasterLayer(lyrPath, lyrName)

            entries = []
            ras1 = QgsRasterCalculatorEntry()
            ras1.ref = lyrName + '@1'
            ras1.raster = lyr2
            ras1.bandNumber = 1
            entries.append(ras1)

            formula = "\"" + ras1.ref + "\"" + ' / ' + str(self.sumValue(lyr2))
            output = tempdir + "/Stnd_Exp_%s.tif" % str(lyrName)
            lst_escNames.append(str(output))
            calc = QgsRasterCalculator(formula, output, 'GTiff', lyr2.extent(), lyr2.width(), lyr2.height(), entries)
            calc.processCalculation()

        for layer in lst[4:6]:
            lyrPath = layer.source()
            lyrName = layer.name()
            lyr2 = QgsRasterLayer(lyrPath, lyrName)

            entries = []
            ras1 = QgsRasterCalculatorEntry()
            ras1.ref = lyrName + '@1'
            ras1.raster = lyr2
            ras1.bandNumber = 1
            entries.append(ras1)

            formula = "\"" + ras1.ref + "\"" + ' / ' + str(self.sumValue(lyr2))
            output = tempdir + "/Stnd_Sen_%s.tif" % str(lyrName)
            lst_escNames.append(str(output))
            calc = QgsRasterCalculator(formula, output, 'GTiff', lyr2.extent(), lyr2.width(), lyr2.height(), entries)
            calc.processCalculation()

        for layer in lst[6:]:
            lyrPath = layer.source()
            lyrName = layer.name()
            lyr2 = QgsRasterLayer(lyrPath, lyrName)

            entries = []
            ras1 = QgsRasterCalculatorEntry()
            ras1.ref = lyrName + '@1'
            ras1.raster = lyr2
            ras1.bandNumber = 1
            entries.append(ras1)

            formula = "\"" + ras1.ref + "\"" + ' / ' + str(self.sumValue(lyr2))
            output = tempdir + "/Stnd_Capa_%s.tif" % str(lyrName)
            lst_escNames.append(str(output))
            calc = QgsRasterCalculator(formula, output, 'GTiff', lyr2.extent(), lyr2.width(), lyr2.height(), entries)
            calc.processCalculation()

        return lst_escNames

    ## Find Zero pixel values in 3 input component lists and convert zero to 1 value.
    # Read stndardized raster layers.
    def replaceZero(self, raster):
        tempdir = self.gettempdir()
        readRst = QgsRasterLayer(raster)
        prov = readRst.dataProvider()
        extent = prov.extent()

        rows = readRst.height()
        cols = readRst.width()

        xmin = extent.xMinimum()
        ymax = extent.yMaximum()
        xsize = readRst.rasterUnitsPerPixelX()
        ysize = readRst.rasterUnitsPerPixelY()

        # Read raster values as array.
        block = prov.block(1, extent, cols, rows)
        values = [[] for i in range(rows)]

        # Find zero value pixels and replace with one value.
        for i in range(rows):
            for j in range(cols):
                if block.value(i, j) == 0:
                    block.setValue(i, j, 1)
                    values[i].append(block.value(i, j))
                else:
                    values[i].append(block.value(i, j))
        arrayValue = np.array(values)

        # Get raster layer name and used for create output file name.
        pathnameLyr = str(raster)
        start = pathnameLyr.find('Stnd_') + 5
        end = pathnameLyr.find('.tif', start)
        inname = 'Stnd_' + pathnameLyr[start:end]
        output_file = tempdir + "/new_%s.tif" % inname

        # Create gtif file with rows and columns from parent raster
        driver = gdal.GetDriverByName("GTiff")
        dst_ds = driver.Create(output_file,
                               cols,
                               rows,
                               1,
                               gdal.GDT_Float32)

        # Write output raster
        band = dst_ds.GetRasterBand(1)
        band.WriteArray(arrayValue)
        band.SetNoDataValue(-9999)

        geotransform = [xmin, xsize, 0, ymax, 0, -ysize]
        dst_ds.SetGeoTransform(geotransform)

        # Setting spatial reference of output raster.
        epsg = readRst.crs().postgisSrid()
        srs = osr.SpatialReference()
        srs.ImportFromEPSG(epsg)
        dst_ds.SetProjection(srs.ExportToWkt())

        # Close output raster dataset.
        dst_ds = None
        return str(output_file)

    # Convert zero values to one in all normalized layers.
    def zero_one(self):
        lst_escNames = self.normalization()
        lst_newNames = []

        for i in range(0, len(lst_escNames)):
            raster = lst_escNames[i]
            self.replaceZero(raster)
            lst_newNames.append(self.replaceZero(raster))

        return lst_newNames

    # Create a list of layers (that zero values converted to one value from temporary directory with prefix= 'new_') for Exposure.
    def lst_exp(self):
        lst_newNames = self.zero_one()
        lstStnd_Exp = []
        # Get exposure layers in "lst_escNames" list and insert in new list.
        for i in lst_newNames:
            if 'new_Stnd_Exp' in i:
                exp_lyr = i
                lstStnd_Exp.append(exp_lyr)
            else:
                pass

        return lstStnd_Exp

    # Create a list of layers (that zero values converted to one value from temporary directory with prefix= 'new_') for Sensitivity.
    def lst_sen(self):
        lst_newNames = self.zero_one()
        lstStnd_Sen = []

        # Get sensitivity layers in "lst_escNames" list and insert in new list.
        for i in lst_newNames:
            if 'new_Stnd_Sen' in i:
                sen_lyr = i
                lstStnd_Sen.append(sen_lyr)
            else:
                pass

        return lstStnd_Sen

    # Create a list of layers (that zero values converted to one value from temporary directory with prefix= 'new_') for Adaptive capacity.
    def lst_capa(self):
        lst_newNames = self.zero_one()
        lstStnd_Capa = []

        # Get adaptive capacity layers in "lst_escNames" list and insert in new list.
        for i in lst_newNames:
            if 'new_Stnd_Capa' in i:
                sen_lyr = i
                lstStnd_Capa.append(sen_lyr)
            else:
                pass

        return lstStnd_Capa

    #Calculate and create Exposure map.
    def exposure(self):
        lstStnd_Exp = self.lst_exp()
        tempdir = self.gettempdir()
        entries = []

        try:
            for i in range(0, len(lstStnd_Exp)):
                raster = lstStnd_Exp[i]
                readRst = processing.getObject(raster)
                ras1 = QgsRasterCalculatorEntry()
                ras1.raster = readRst
                ras1.ref = "ext_lyr" + str(i+1) + "@1"
                ras1.bandNumber = 1
                entries.append(ras1)

            formula = '((' + entries[0].ref + ' * ' + entries[1].ref + ' * ' + entries[2].ref + ' * ' + entries[3].ref + ')^ 0.25) * 1000000'

            readRst = QgsRasterLayer(lstStnd_Exp[0])
            output = tempdir + "/Exposure.tif"
            calc = QgsRasterCalculator(formula, output, 'GTiff', readRst.extent(), readRst.width(), readRst.height(), entries)
            calc.processCalculation()
            return output

        except:
            self.userWarning("Error in Create Exposure map", "Can not create Create Exposure map, Exit")

    # Calculate and create Sensitivity map.
    def sensitivity(self):
        lstStnd_Sen = self.lst_sen()
        tempdir = self.gettempdir()
        entries = []

        try:
            for i in range(0, len(lstStnd_Sen)):
                raster = lstStnd_Sen[i]
                readRst = processing.getObject(raster)
                ras1 = QgsRasterCalculatorEntry()
                ras1.raster = readRst
                ras1.ref = "sen_lyr" + str(i+1) + "@1"
                ras1.bandNumber = 1
                entries.append(ras1)

            formula = '((' + entries[0].ref + ' * ' + entries[1].ref + ')^ 0.5) * 1000000'
            readRst = QgsRasterLayer(lstStnd_Sen[0])
            output = tempdir + "/Sensitivity.tif"
            calc = QgsRasterCalculator(formula, output, 'GTiff', readRst.extent(), readRst.width(), readRst.height(), entries)
            calc.processCalculation()
            return output

        except:
            self.userWarning("Error in Create Sensitivity map", "Can not create Create Sensitivity map, Exit")

    # Calculate and create Adaptive Capacity map.
    def capacity(self):
        lstStnd_Capa = self.lst_capa()
        tempdir = self.gettempdir()
        entries = []

        try:
            for i in range(0, len(lstStnd_Capa)):
                raster = lstStnd_Capa[i]
                readRst = processing.getObject(raster)
                ras1 = QgsRasterCalculatorEntry()
                ras1.raster = readRst
                ras1.ref = "capa_lyr" + str(i+1) + "@1"
                ras1.bandNumber = 1
                entries.append(ras1)

            formula = '((' + entries[0].ref + ' * ' + entries[1].ref + ')^ 0.5)* 1000000'
            readRst = QgsRasterLayer(lstStnd_Capa[0])
            output = tempdir + "/Capacity.tif"
            calc = QgsRasterCalculator(formula, output, 'GTiff', readRst.extent(), readRst.width(), readRst.height(), entries)
            calc.processCalculation()
            return output

        except:
            self.userWarning("Error in Create Adaptive Capacity map", "Can not create Create Adaptive Capacity map, Exit")

    # Get three components layers created in temporary folder.
    def vulneravility(self):
        tempdir = self.gettempdir()
        exposure = self.exposure()
        sensitivity = self.sensitivity()
        capacity = self.capacity()

        # List layers for calculate.
        entries = []

        # Open layers
        exp_layer = QgsRasterLayer(exposure, "Exposure")
        sen_layer = QgsRasterLayer(sensitivity, "Sensitivity")
        capa_layer = QgsRasterLayer(capacity, "Capacity")

        # Add exposure layer.
        resp_exp = QgsRasterCalculatorEntry()
        resp_exp.raster = exp_layer
        resp_exp.ref = "exposure@1"
        resp_exp.bandNumber = 1
        entries.append(resp_exp)

        # Add sensitivity layer.
        resp_sen = QgsRasterCalculatorEntry()
        resp_sen.raster = sen_layer
        resp_sen.ref = "sensetivity@1"
        resp_sen.bandNumber = 1
        entries.append(resp_sen)

        # Add adaptive capacity.
        resp_capa = QgsRasterCalculatorEntry()
        resp_capa.raster = capa_layer
        resp_capa.ref = "capacity@1"
        resp_capa.bandNumber = 1
        entries.append(resp_capa)

        # Calculation and create vulnerability map.
        formula = '( "exposure@1" * ( 1 + "sensetivity@1" + "capacity@1" )) / 3'
        output = tempdir + "/Vulnerability.tif"
        calc = QgsRasterCalculator(formula, output, 'GTiff', exp_layer.extent(), exp_layer.width(), exp_layer.height(), entries)
        calc.processCalculation()

        # Add vulnerability layer to canvas.
        vulraster = QgsRasterLayer(output, 'Vulnerability')
        QgsMapLayerRegistry.instance().addMapLayer(vulraster)